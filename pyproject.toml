[project]
name = "robot_sf"
version = "2.0.0"
description = """
This package allows implementing a "gymnasium-style" environment
for navigating a crowd with autonomous micromobility vehicles
"""
authors = [
    {name = "Marco TrÃ¶ster", email = "marco.troester.student@uni-augsburg.de"}
]
license = "GPL-3.0-only"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Core dependencies
    "numpy>=1.26.4",
    "gymnasium>=1.0.0",
    "gym>=0.26.2",
    "numba>=0.60.0",
    "pygame>=2.6.1",
    # Machine Learning
    "stable-baselines3[extra]>=2.4.0",
    "torch>=2.5.1",
    "scikit-learn>=1.6.1",
    "optuna>=4.1.0",
    "tensorboard>=2.18.0",
    "wandb>=0.18.7",
    # Data processing
    "pandas>=2.2.3",
    "scipy>=1.14.1",
    "matplotlib>=3.9.2",
    "pillow>=10.4.0",
    "svgelements>=1.9.6",
    # Utilities
    "loguru>=0.7.2",
    "rich>=13.9.4",
    "psutil>=6.1.0",
    "toml>=0.10.2",
    "shimmy>=2.0.0",
    "moviepy>=2.0.0",
    # Development tools
    "pytest>=8.3.3",
    "scalene>=1.5.48",
    "ruff>=0.9.7",
    "pre-commit>=4.1.0",
    "setuptools>=70.0.0",
    "pysocialforce",
    "jsonschema>=4.23.0",
]

[project.optional-dependencies]
dev = [
    "jupyter>=1.0.0",
    "black>=24.0.0",
    "mypy>=1.0.0",
]
gpu = [
    "torch[cuda]>=2.5.1",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
]
progress = [
    "tqdm>=4.67.0",
]
analysis = [
    "seaborn>=0.13.2",
    "matplotlib>=3.9.2",
    "pandas>=2.2.3",
]
viz = [
    "matplotlib>=3.9.2",
    "seaborn>=0.13.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatchling.build.targets.wheel]
packages = ["robot_sf"]

[tool.hatchling.build.targets.wheel.shared-data]
"robot_sf/maps" = "robot_sf/maps"

[tool.hatchling.build.targets.sdist]
include = [
    "/robot_sf",
    "/README.md",
    "/LICENSE",
]
exclude = [
    "/tests",
    "/test_pygame",
    "/.git",
    "/.pytest_cache",
    "/__pycache__",
    "/fast-pysf",
]

[tool.hatch.metadata]
allow-direct-references = true

# Use ruff when possible
[tool.autopep8]
max_line_length = 100
verbose = false
hang-closing = true
in-place = true
recursive = true
aggressive = 4

# Use ruff when possible
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]

[tool.ruff]
required-version = ">=0.9.7"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "fast-pysf",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = [
  # you already have:
  "E4","E7","E9","F","W","C901","I001",

  # **Bug catchers & safety**
  "B",      # flake8-bugbear: common footguns (B006/B008/B904 are gold)
  "BLE",    # no bare/overbroad except
  "TRY",    # try/except anti-patterns (tryceratops)
  "A",      # no shadowing of builtins
  "ARG",    # unused args in public APIs
  "S",      # Bandit security checks (safe subset, see per-file ignores)

  # **Modernization & simplification**
  "UP",     # pyupgrade: keep code current
  "SIM",    # flake8-simplify: prune needless branches/loops
  "C4",     # flake8-comprehensions: cleaner comps/gens
  "ICN",    # canonical import aliases (np, pd, plt, etc.)

  # **Performance & correctness nits**
  "PERF",   # perflint: avoid tiny perf traps (informational)
  "PL",     # selected pylint-derived rules (see ignores below)

  # **Time handling**
  "DTZ",    # timezone-aware datetime usage

  # **Logging / prints / commented code**
  "G",      # logging format string correctness
  "T20",    # discourage print() outside scripts/tests
  "ERA",    # eradicate commented-out code

  # **Style that doesn't fight your formatter**
  "COM",    # trailing commas where helpful
  "ISC",    # implicit string concat gotchas

  # **Housekeeping**
  "RUF",    # Ruff's own rules (e.g., unused `noqa`)
  "PGH",    # blanket noqa / useless noqa hygiene
  "TCH",    # move typing-only imports under TYPE_CHECKING
  "TID",    # tidy imports (relative vs absolute)
  "N",      # pep8-naming
]

ignore = [
  # Pylint-derived "opinionated" refactors that often fire in scientific code:
  "PLR0911","PLR0912","PLR0913","PLR0915", # many returns/branches/args
  "PLR2004", # magic values in comparisons (okay in tests/configs)
  "S", # Security checks not critical in research code
  
  # Research code leniencies - these rules are too noisy for scientific computing:
  "PGH003", # Use specific rule codes when ignoring type issues (too pedantic)
  "DTZ005", # datetime.now() without tz (common in research scripts)
  "ERA001", # Commented-out code (sometimes intentional in research)
  "ARG001", "ARG005", # Unused function arguments (common in test mocks)
  "PERF401", # List comprehensions vs loops (micro-optimization)
  "RUF005", # Consider iterable unpacking (style preference)
  "TRY300", # Move statement to else block (sometimes less readable)
  "BLE001", # Do not catch blind exception (sometimes necessary in research)
  "B017", # Assert blind exception (okay in schema validation tests)
  "N806", # Variable in function should be lowercase (math conventions use uppercase)
  "C417", # Unnecessary map() usage (sometimes clearer than comprehensions)
  "UP038", # Use X | Y in isinstance (Python 3.10+ syntax, but codebase supports 3.10)
  "PLC0206", # Extracting value without .items() (sometimes clearer)
  "TRY003", # Avoid specifying long messages outside the exception class (too pedantic)
  "SIM105", # Use contextlib.suppress instead of try-except-pass (sometimes less clear)
  "RUF034", # Useless if-else condition (sometimes intentional for clarity)
  "T201", # print found (allowed in scripts/examples as per per-file-ignores)
  "RUF002",
  "RUF003",
]

[tool.ruff.lint.per-file-ignores]
# Tests: allow asserts, prints, some magic values & security test scaffolding
"tests/**/*" = ["S101","T201","PLR2004"]
# One-off scripts / notebooks exports: allow prints
"scripts/**/*" = ["T201"]
# Examples and docs: allow prints and other leniencies
"examples/**/*" = ["T201"]
"docs/**/*" = ["T201"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
testpaths = ["tests"]
filterwarnings = [
    # Suppress external library warnings
    "ignore::DeprecationWarning:pygame.*",
    "ignore::DeprecationWarning:stable_baselines3.*",
    "ignore::UserWarning:stable_baselines3.*",
    "ignore::UserWarning:gymnasium.*",
    # Keep our own warnings visible
    "default::DeprecationWarning:robot_sf.*",
    "default::UserWarning:robot_sf.*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "timeout: marks tests with a timeout expectation",
]


[dependency-groups]
dev = [
    "pylint>=3.3.4",
    "pytest-xdist>=3.6.1",
]

[project.scripts]
robot_sf_bench = "robot_sf.benchmark.cli:main"

# Note: uv-specific config removed to avoid duplicate-config warnings with uv.toml

[tool.uv.sources]
pysocialforce = { path = "fast-pysf", editable = true }
