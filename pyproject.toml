[project]
name = "robot_sf"
version = "2.0.0"
description = """
This package allows implementing a "gymnasium-style" environment
for navigating a crowd with autonomous micromobility vehicles
"""
authors = [
    {name = "Marco Tröster", email = "marco.troester.student@uni-augsburg.de"}
]
license = "GPL-3.0-only"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Core dependencies
    "numpy>=1.26.4",
    "gymnasium>=1.0.0",
    "gym>=0.26.2",
    "numba>=0.60.0",
    "pygame>=2.6.1",
    # Machine Learning
    "stable-baselines3[extra]>=2.4.0",
    "torch>=2.5.1",
    "scikit-learn>=1.6.1",
    "optuna>=4.1.0",
    "tensorboard>=2.18.0",
    "wandb>=0.18.7",
    # Data processing
    "pandas>=2.2.3",
    "scipy>=1.14.1",
    "matplotlib>=3.9.2",
    "pillow>=10.4.0",
    "svgelements>=1.9.6",
    # Utilities
    "loguru>=0.7.2",
    "rich>=13.9.4",
    "psutil>=6.1.0",
    "toml>=0.10.2",
    "shimmy>=2.0.0",
    "moviepy>=2.0.0",
    # Development tools
    "pytest>=8.3.3",
    "pytest-cov>=6.0.0",
    "scalene>=1.5.48",
    "ruff>=0.9.7",
    "pre-commit>=4.1.0",
    "setuptools>=70.0.0",
    "pysocialforce",
    "jsonschema>=4.23.0",
]

[project.optional-dependencies]
dev = [
    "jupyter>=1.0.0",
    "black>=24.0.0",
    "mypy>=1.0.0",
]
gpu = [
    "torch[cuda]>=2.5.1",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
]
progress = [
    "tqdm>=4.67.0",
]
analysis = [
    "seaborn>=0.13.2",
    "matplotlib>=3.9.2",
    "pandas>=2.2.3",
]
viz = [
    "matplotlib>=3.9.2",
    "seaborn>=0.13.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatchling.build.targets.wheel]
packages = ["robot_sf"]

[tool.hatchling.build.targets.wheel.shared-data]
"robot_sf/maps" = "robot_sf/maps"

[tool.hatchling.build.targets.sdist]
include = [
    "/robot_sf",
    "/README.md",
    "/LICENSE",
]
exclude = [
    "/tests",
    "/test_pygame",
    "/.git",
    "/.pytest_cache",
    "/__pycache__",
    "/fast-pysf",
]

[tool.hatch.metadata]
allow-direct-references = true

# Use ruff when possible
[tool.autopep8]
max_line_length = 100
verbose = false
hang-closing = true
in-place = true
recursive = true
aggressive = 4

# Use ruff when possible
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]

[tool.ruff]
required-version = ">=0.9.7"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "fast-pysf",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = [
  # you already have:
  "E4","E7","E9","F","W","C901","I001",

  # **Bug catchers & safety**
  "B",      # flake8-bugbear: common footguns (B006/B008/B904 are gold)
  "BLE",    # no bare/overbroad except
  "TRY",    # try/except anti-patterns (tryceratops)
  "A",      # no shadowing of builtins
  "ARG",    # unused args in public APIs
  "S",      # Bandit security checks (safe subset, see per-file ignores)

  # **Modernization & simplification**
  "UP",     # pyupgrade: keep code current
  "C4",     # flake8-comprehensions: cleaner comps/gens
  "ICN",    # canonical import aliases (np, pd, plt, etc.)

  # **Performance & correctness nits**
  "PERF",   # perflint: avoid tiny perf traps (informational)
  "PL",     # selected pylint-derived rules (see ignores below)

  # **Time handling**
  "DTZ",    # timezone-aware datetime usage

  # **Logging / prints / commented code**
  "G",      # logging format string correctness
  "T20",    # discourage print() outside scripts/tests
  "ERA",    # eradicate commented-out code

  # **Style that doesn't fight your formatter**
  "COM",    # trailing commas where helpful
  "ISC",    # implicit string concat gotchas

  # **Housekeeping**
  "RUF",    # Ruff's own rules (e.g., unused `noqa`)
  "PGH",    # blanket noqa / useless noqa hygiene
  "TCH",    # move typing-only imports under TYPE_CHECKING
  "TID",    # tidy imports (relative vs absolute)
]

ignore = [
    # Research/scientific computing patterns that are acceptable
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0915",  # Too many statements
    "PLR2004",  # Magic value comparison
    "S",        # Bandit security issues (too noisy for research code)
    "PGH003",   # Use specific rule codes when ignoring instead of categories
    "DTZ005",   # datetime.datetime.now() called without a 'tz' argument
    "ERA001",   # Found commented-out code
    "ARG001",   # Unused function argument
    "ARG005",   # Unused lambda argument
    "PERF401",  # Use a list comprehension to collect items
    "TRY004",   # Prefer `TypeError` exception for invalid type
    "B904",     # Within an `except` clause, raise exceptions with `raise ... from err`
    "PLW2901",  # `for` loop variable `line` overwritten by assignment target
    "TRY301",   # Abstract `raise` to an inner function
    "TRY401",   # Redundant exception object included in `logging.exception` call
    "ICN001",   # `matplotlib.pyplot` should be imported as `plt`
    "N803",     # Argument name should be lowercase
    "A005",     # Module `types` shadows a Python standard-library module
    "A001",     # Variable `id` is shadowing a Python builtin
    "G004",     # Logging statement uses f-string
    "B008",     # Do not perform function call in argument defaults
    "B023",     # Function definition does not bind loop variable
    "ISC003",   # Explicitly concatenated string should be implicitly concatenated
    "UP007",    # Use `X | Y` for type annotations
    "B007",     # Loop control variable not used within loop body
    "PLW0603",  # Using the global statement to update is discouraged
    "ARG002",   # Unused method argument
    "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF001",   # String contains ambiguous `‑` (NON-BREAKING HYPHEN)
    "RUF002",   # String contains ambiguous characters (EN DASH, EM DASH)
    "RUF003",   
    "TRY300",   # Consider moving this statement to an `else` block
    "TRY003",   # Avoid specifying long messages outside the exception class
    "N806",     # Variable `X` in function should be lowercase (too noisy for math code)
    "B017",     # Do not assert blind exception: `Exception`
    "PLC0206",  # Extracting value from dictionary without calling `.items()`
    "RUF005",   # Consider iterable unpacking instead of concatenation
    "COM812",  # Missing trailing comma in a multi-line collection
]

[tool.ruff.lint.per-file-ignores]
# Tests: allow asserts, prints, some magic values & security test scaffolding
"tests/**/*" = ["S101","T201","PLR2004","BLE001"]
# One-off scripts / notebooks exports: allow prints
"scripts/**/*" = ["T201","BLE001"]
# Examples and docs: allow prints and other leniencies
"examples/**/*" = ["T201","BLE001"]
"docs/**/*" = ["T201","BLE001"]
# CLI tools: allow prints to stdout
"robot_sf/benchmark/cli.py" = ["T201"]
"robot_sf/benchmark/**/*" = ["BLE001"]
"robot_sf/benchmark/full_classic/visuals.py" = ["C901"]
"robot_sf/benchmark/full_classic/render_sim_view.py" = ["C901"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
# dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.coverage.run]
source = ["robot_sf"]
omit = [
    "*/tests/*",
    "*/test_*",
    "test_pygame/*",
    "examples/*",
    "scripts/*",
    "fast-pysf/*",
    "*/conftest.py",
    "*/__pycache__/*",
]
parallel = true
branch = false

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = false

[tool.coverage.json]
output = "coverage.json"
show_contexts = false

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--cov=robot_sf",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=json",
]
testpaths = ["tests"]
filterwarnings = [
    # Suppress external library warnings
    "ignore::DeprecationWarning:pygame.*",
    "ignore::DeprecationWarning:stable_baselines3.*",
    "ignore::UserWarning:stable_baselines3.*",
    "ignore::UserWarning:gymnasium.*",
    # Keep our own warnings visible
    "default::DeprecationWarning:robot_sf.*",
    "default::UserWarning:robot_sf.*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "timeout: marks tests with a timeout expectation",
]


[dependency-groups]
dev = [
    "pylint>=3.3.4",
    "pytest-xdist>=3.6.1",
]

[project.scripts]
robot_sf_bench = "robot_sf.benchmark.cli:main"

# Note: uv-specific config removed to avoid duplicate-config warnings with uv.toml

[tool.uv.sources]
pysocialforce = { path = "fast-pysf", editable = true }

[tool.ty.src]
exclude = [
    "tests",
    "test_pygame",
    "fast-pysf"
]

[tool.ty.environment]
python = "./.venv"
