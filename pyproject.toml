[project]
name = "robot_sf"
version = "2.0.0"
description = """
This package allows implementing a "gymnasium-style" environment
for navigating a crowd with autonomous micromobility vehicles
"""
authors = [
    {name = "Marco Tröster", email = "marco.troester.student@uni-augsburg.de"}
]
license = "GPL-3.0-only"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Core dependencies
    "numpy>=1.26.4",
    "gymnasium>=1.0.0",
    "gym>=0.26.2",
    "numba>=0.60.0",
    "pygame>=2.6.1",
    # Machine Learning
    "stable-baselines3[extra]>=2.4.0",
    "torch>=2.5.1",
    "scikit-learn>=1.6.1",
    "optuna>=4.1.0",
    "tensorboard>=2.18.0",
    "wandb>=0.18.7",
    # Data processing
    "pandas>=2.2.3",
    "scipy>=1.14.1",
    "matplotlib>=3.9.2",
    "pillow>=10.4.0",
    "svgelements>=1.9.6",
    # Utilities
    "tqdm>=4.67.0",
    "loguru>=0.7.2",
    "rich>=13.9.4",
    "psutil>=6.1.0",
    "toml>=0.10.2",
    "shimmy>=2.0.0",
    "moviepy>=2.0.0",
    # Development tools
    "pytest>=8.3.3",
    "scalene>=1.5.48",
    "ruff>=0.9.7",
    "pre-commit>=4.1.0",
    "setuptools>=70.0.0",
    "pysocialforce",
    "jsonschema>=4.23.0",
    # Documentation formatting
    "mdformat>=0.7.19",
    "mdformat-gfm>=0.3.6",
    "mdformat-frontmatter>=0.4.1",
]

[project.optional-dependencies]
dev = [
    "jupyter>=1.0.0",
    "black>=24.0.0",
    "mypy>=1.0.0",
]
gpu = [
    "torch[cuda]>=2.5.1",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatchling.build.targets.wheel]
packages = ["robot_sf"]

[tool.hatchling.build.targets.wheel.shared-data]
"robot_sf/maps" = "robot_sf/maps"

[tool.hatchling.build.targets.sdist]
include = [
    "/robot_sf",
    "/README.md",
    "/LICENSE",
]
exclude = [
    "/tests",
    "/test_pygame",
    "/.git",
    "/.pytest_cache",
    "/__pycache__",
    "/fast-pysf",
]

[tool.hatch.metadata]
allow-direct-references = true

# Use ruff when possible
[tool.autopep8]
max_line_length = 100
verbose = false
hang-closing = true
in-place = true
recursive = true
aggressive = 4

# Use ruff when possible
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]

[tool.ruff]
required-version = ">=0.9.7"
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "fast-pysf",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "W", "C901", "I001"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
testpaths = ["tests"]
filterwarnings = [
    # Suppress external library warnings
    "ignore::DeprecationWarning:pygame.*",
    "ignore::DeprecationWarning:stable_baselines3.*",
    "ignore::UserWarning:stable_baselines3.*",
    "ignore::UserWarning:gymnasium.*",
    # Keep our own warnings visible
    "default::DeprecationWarning:robot_sf.*",
    "default::UserWarning:robot_sf.*",
]


[dependency-groups]
dev = [
    "mdformat>=0.7.22",
    "mdformat-beautysh>=0.1.1",
    "mdformat-footnote>=0.1.1",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-gfm>=0.4.1",
    "mdformat-gfm-alerts>=2.0.0",
    "mdformat-pyproject>=0.0.2",
    "mdformat-ruff>=0.1.3",
    "pylint>=3.3.4",
]

[project.scripts]
robot_sf_bench = "robot_sf.benchmark.cli:main"

# Note: uv-specific config removed to avoid duplicate-config warnings with uv.toml

[tool.uv.sources]
pysocialforce = { path = "fast-pysf", editable = true }

[tool.mdformat]
# How to wrap text:
# - "keep": preserve author’s line breaks
# - integer (e.g. 88): reflow to this width
wrap = "keep"

# Automatically renumber ordered lists
# - false keeps your numbering as-is (my pick, because Markdown allows "1." everywhere)
# - true ensures consistent incremental numbering
number = false

# Normalize line endings
end_of_line = "lf"

# Add a trailing newline at the end of each file
insert_final_newline = true

# Style of bullet list markers
# options: "-", "*", "+"
list_marker = "-"

# Blank lines around top-level headings
# good for consistent diffs and readability
blank_line_before_heading = true
blank_line_after_heading = true

# Whether to collapse consecutive blank lines into one
collapse_consecutive_blank_lines = true
