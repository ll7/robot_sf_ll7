metadata:
  generated_at: "2025-09-30T10:30:00Z"
  reviewer: "GitHub Copilot"
  audit_passes:
    - type: "keyword_scan"
      queries:
        - "RobotEnv("
        - "PPO.load"
        - "run_batch("
        - "mkdir(parents=True"
      notes: "Used ripgrep to surface repeated environment setup, policy loading, and output directory creation in examples/ and scripts/."
    - type: "manual_review"
      scope:
        - "examples/classic_interactions_pygame.py"
        - "examples/demo_offensive.py"
        - "examples/demo_defensive.py"
        - "examples/demo_pedestrian*.py"
        - "examples/demo_full_classic_benchmark.py"
        - "examples/demo_aggregate.py"
        - "examples/demo_factory_options.py"
        - "examples/demo_robot_sf_bench_ppo.py"
        - "examples/demo_refactored_environments.py"
        - "scripts/benchmark*.py"
        - "scripts/run_classic_interactions.py"
        - "scripts/run_social_navigation_benchmark.py"
      notes: "Reviewed high-usage demos/scripts to confirm helper duplication, capture integration nuances, and verify FR-006 exclusions."
exclusions:
  rationale: "FR-006 clarifies that single-use validation/debug scripts stay out of scope."
  paths:
    - "scripts/validation/test_basic_environment.sh"
    - "scripts/validation/test_model_prediction.sh"
    - "scripts/validation/test_complete_simulation.sh"
    - "scripts/validation/performance_smoke_test.py"
helper_categories:
  environment_setup:
    description: "Environment creation helpers for robot and pedestrian simulations."
    target_module: "robot_sf.benchmark.helper_catalog"
    default_owner: "robot-sf-core"
  policy_management:
    description: "Model loading, caching, and failure guidance helpers."
    target_module: "robot_sf.benchmark.helper_catalog"
    default_owner: "robot-sf-core"
  episode_execution:
    description: "Episode looping, recording, and summary generation helpers."
    target_module: "robot_sf.benchmark.helper_catalog"
    default_owner: "robot-sf-core"
  rendering_io:
    description: "Reusable rendering and filesystem utilities for video outputs."
    target_module: "robot_sf.render.helper_catalog"
    default_owner: "robot-sf-visuals"
  documentation:
    description: "Automation for publishing helper catalog entries to docs."
    target_module: "robot_sf.docs.helper_catalog"
    default_owner: "robot-sf-core"
helper_capabilities:
  - name: "prepare_classic_env"
    category_key: "environment_setup"
    summary: "Initialize classic interaction environments via factory/unified config and return deterministic seeds."
    inputs:
      - "config_override: robot_sf.gym_env.unified_config.RobotSimulationConfig | None"
      - "scenario: str | None"
    outputs: "tuple[robot_sf.gym_env.RobotEnv, list[int]]"
    dependencies:
      - "robot_sf.gym_env.environment_factory.make_robot_env"
      - "robot_sf.gym_env.unified_config.RobotSimulationConfig"
      - "robot_sf.gym_env.env_config.EnvSettings"
    tests:
      - "tests/classic_interactions/test_seed_determinism.py"
      - "tests/classic_interactions/test_headless_safety.py"
    docs_link: "docs/dev/helper_catalog.md#prepare_classic_env"
    state: "identified"
    occurrences:
      - orchestrator: "examples/demo_offensive.py"
        lines: "L9-L24"
        notes: "Manual EnvSettings construction + RobotEnv(debug=True)"
      - orchestrator: "examples/demo_defensive.py"
        lines: "L31-L77"
        notes: "Manual DifferentialDrive env setup, direct RobotEnv instantiation"
      - orchestrator: "examples/demo_pedestrian.py"
        lines: "L17-L47"
        notes: "PedestrianEnv setup mirrors robot env creation; seeds implicit"
      - orchestrator: "examples/demo_pedestrian_updated.py"
        lines: "L20-L60"
        notes: "Updated pedestrian demo still performs manual env creation"
      - orchestrator: "examples/view_recording.py"
        lines: "L19-L52"
        notes: "EnvSettings + RobotEnv with recording_enabled=True"
      - orchestrator: "scripts/benchmark02.py"
        lines: "L38-L71"
        notes: "Benchmark runner builds EnvSettings and RobotEnv directly"
  - name: "load_trained_policy"
    category_key: "policy_management"
    summary: "Load and cache PPO (or other) policies with actionable error handling."
    inputs:
      - "path: str | Path"
      - "env: Optional[gym.Env]"
    outputs: "stable_baselines3.base_class.BaseAlgorithm"
    dependencies:
      - "stable_baselines3.PPO"
      - "robot_sf.benchmark.helper_catalog.prepare_classic_env"
    tests:
      - "tests/classic_interactions/test_model_path_failure.py"
      - "tests/classic_interactions/test_smoke_demo.py"
    docs_link: "docs/dev/helper_catalog.md#load_trained_policy"
    state: "identified"
    occurrences:
      - orchestrator: "examples/demo_offensive.py"
        lines: "L25-L34"
        notes: "Direct PPO.load with env-bound model"
      - orchestrator: "examples/demo_defensive.py"
        lines: "L78-L119"
        notes: "PPO.load invoked twice (robot + adapted policy)"
      - orchestrator: "examples/demo_pedestrian.py"
        lines: "L22-L42"
        notes: "Robot model loaded inside make_env, then PPO.load for pedestrian"
      - orchestrator: "examples/demo_pedestrian_updated.py"
        lines: "L33-L74"
        notes: "Same dual PPO.load pattern as legacy demo"
      - orchestrator: "scripts/benchmark.py"
        lines: "L9-L42"
        notes: "PPO.load executed on manual RobotEnv"
      - orchestrator: "scripts/benchmark02.py"
        lines: "L72-L115"
        notes: "Optional PPO.load with fallback to random actions"
  - name: "run_episodes_with_recording"
    category_key: "episode_execution"
    summary: "Execute deterministic episode loops, capture frames, and produce summaries."
    inputs:
      - "env: gym.Env"
      - "policy: Callable | BaseAlgorithm"
      - "seeds: Iterable[int]"
      - "record: bool"
      - "output_dir: Path"
    outputs: "list[EpisodeSummary]"
    dependencies:
      - "moviepy"
      - "robot_sf.render.sim_view"
      - "robot_sf.benchmark.helper_catalog.load_trained_policy"
    tests:
      - "tests/classic_interactions/test_recording_success.py"
      - "tests/classic_interactions/test_recording_skip_graceful.py"
      - "tests/classic_interactions/test_summary_schema.py"
    docs_link: "docs/dev/helper_catalog.md#run_episodes_with_recording"
    state: "identified"
    occurrences:
      - orchestrator: "examples/classic_interactions_pygame.py"
        lines: "L197-L360"
        notes: "run_episode + _maybe_record manage frames and logging manually"
      - orchestrator: "examples/demo_offensive.py"
        lines: "L34-L47"
        notes: "Manual loop with env.render() and reset"
      - orchestrator: "examples/demo_defensive.py"
        lines: "L121-L210"
        notes: "Custom observation adapter, env.render(), reset on done"
      - orchestrator: "examples/demo_pedestrian.py"
        lines: "L49-L79"
        notes: "Loop with env.render() and env.exit()"
      - orchestrator: "scripts/benchmark.py"
        lines: "L17-L64"
        notes: "Benchmark loop prints metrics; no structured summaries"
  - name: "ensure_output_dir"
    category_key: "rendering_io"
    summary: "Create and normalize output directories for episodes, visuals, or summaries."
    inputs:
      - "path: Path | str"
    outputs: "Path"
    dependencies:
      - "pathlib.Path"
    tests:
      - "tests/classic_interactions/test_smoke_demo.py"
    docs_link: "docs/dev/helper_catalog.md#ensure_output_dir"
    state: "identified"
    occurrences:
      - orchestrator: "examples/demo_full_classic_benchmark.py"
        lines: "L49-L92"
        notes: "Timestamped dir mkdir(parents=True, exist_ok=True)"
      - orchestrator: "examples/demo_aggregate.py"
        lines: "L35-L86"
        notes: "results/demo_aggregate directory creation"
      - orchestrator: "examples/demo_robot_sf_bench_ppo.py"
        lines: "L21-L60"
        notes: "Output dir mkdir prior to CLI invocation"
      - orchestrator: "scripts/benchmark_workers.py"
        lines: "L36-L69"
        notes: "bench() ensures output directory before run_batch"
      - orchestrator: "scripts/run_social_navigation_benchmark.py"
        lines: "L126-L153"
        notes: "Timestamped output root creation"
  - name: "capture_frames"
    category_key: "rendering_io"
    summary: "Headless-safe frame sampling + moviepy encoding pipeline."
    inputs:
      - "env"
      - "stride: int"
    outputs: "list[np.ndarray]"
    dependencies:
      - "numpy"
      - "moviepy"
    tests:
      - "tests/classic_interactions/test_recording_success.py"
    docs_link: "docs/dev/helper_catalog.md#capture_frames"
    state: "identified"
    occurrences:
      - orchestrator: "examples/classic_interactions_pygame.py"
        lines: "L256-L347"
        notes: "Manual frame placeholders + moviepy encoding"
      - orchestrator: "examples/view_recording.py"
        lines: "L19-L67"
        notes: "Recording enabled env with env.render per step"
  - name: "register_helper"
    category_key: "documentation"
    summary: "Programmatically publish helper metadata to docs indices."
    inputs:
      - "name: str"
      - "summary: str"
      - "doc_path: str"
    outputs: "None"
    dependencies:
      - "docs/README.md"
      - "yaml"
    tests:
      - "tests/docs/test_docs_readme_links.py"
    docs_link: "docs/dev/helper_catalog.md#register_helper"
    state: "identified"
    occurrences:
      - orchestrator: "docs/README.md"
        lines: "N/A"
        notes: "Currently maintained manually; no automation present"
  - name: "prepare_pedestrian_env"
    category_key: "environment_setup"
    summary: "Construct pedestrian environments with robot model injection and map conversion."
    inputs:
      - "map_path: str"
      - "robot_model_path: str"
    outputs: "robot_sf.gym_env.pedestrian_env.PedestrianEnv"
    dependencies:
      - "robot_sf.gym_env.pedestrian_env.PedestrianEnv"
      - "robot_sf.nav.svg_map_parser.convert_map"
      - "stable_baselines3.PPO"
    tests: []
    docs_link: "docs/dev/helper_catalog.md#prepare_pedestrian_env"
    state: "identified"
    occurrences:
      - orchestrator: "examples/demo_pedestrian.py"
        lines: "L13-L48"
        notes: "convert_map + PedEnvSettings + PPO.load"
      - orchestrator: "examples/demo_pedestrian_updated.py"
        lines: "L20-L70"
        notes: "Same pattern with updated config defaults"
  - name: "benchmark_batch_runner"
    category_key: "benchmark_orchestration"
    summary: "Configure run_batch/run_full_benchmark with consistent output handling and manifests."
    inputs:
      - "scenarios_or_path: str | Path | list[dict]"
      - "output_root: Path"
    outputs: "dict[str, Any]"
    dependencies:
      - "robot_sf.benchmark.runner.run_batch"
      - "robot_sf.benchmark.full_classic.orchestrator.run_full_benchmark"
    tests:
      - "tests/benchmark/test_resume_manifest.py"
      - "tests/benchmark/test_run_batch_smoke.py"
    docs_link: "docs/dev/helper_catalog.md#benchmark_batch_runner"
    state: "identified"
    occurrences:
      - orchestrator: "examples/demo_full_classic_benchmark.py"
        lines: "L65-L122"
        notes: "BenchmarkCLIConfig + run_full_benchmark"
      - orchestrator: "examples/demo_aggregate.py"
        lines: "L55-L76"
        notes: "run_batch for demo matrix"
      - orchestrator: "scripts/run_classic_interactions.py"
        lines: "L64-L104"
        notes: "run_batch with CLI args"
      - orchestrator: "scripts/run_social_navigation_benchmark.py"
        lines: "L170-L299"
        notes: "run_full_benchmark per baseline, aggregate results"
example_orchestrators:
  - path: "examples/classic_interactions_pygame.py"
    owner: "robot-sf-core"
    requires_recording: true
    helper_candidates:
      - "prepare_classic_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
      - "capture_frames"
      - "ensure_output_dir"
    notes: "Already uses factory.make_robot_env but retains bespoke helpers (_load_policy, _maybe_record)."
  - path: "examples/demo_offensive.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_classic_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
    notes: "Direct RobotEnv construction, PPO.load, manual loop."
  - path: "examples/demo_defensive.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_classic_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
    notes: "Adds observation adapter but otherwise mirrors offensive demo."
  - path: "examples/demo_pedestrian.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_pedestrian_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
    notes: "Dual PPO load (robot + pedestrian) and manual env cleanup."
  - path: "examples/demo_pedestrian_updated.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_pedestrian_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
    notes: "Same as legacy demo with updated defaults."
  - path: "examples/demo_full_classic_benchmark.py"
    owner: "robot-sf-core"
    requires_recording: true
    helper_candidates:
      - "ensure_output_dir"
      - "benchmark_batch_runner"
    notes: "Timestamped output dirs, CLI config assembly."
  - path: "examples/demo_factory_options.py"
    owner: "robot-sf-core"
    requires_recording: true
    helper_candidates:
      - "ensure_output_dir"
    notes: "Already uses make_robot_env but should source recording helper for consistency."
  - path: "examples/demo_robot_sf_bench_ppo.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "ensure_output_dir"
      - "benchmark_batch_runner"
    notes: "Programmatic CLI invocation with manual mkdir."
  - path: "examples/demo_refactored_environments.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_classic_env"
      - "ensure_output_dir"
    notes: "Demonstrates env options but still mixes setup logic."
  - path: "examples/demo_aggregate.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "ensure_output_dir"
      - "benchmark_batch_runner"
    notes: "Duplicate entry consolidated to highlight aggregator usage."
  - path: "scripts/benchmark.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_classic_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
    notes: "Low-level benchmark loop with manual metrics printing."
  - path: "scripts/benchmark02.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "prepare_classic_env"
      - "load_trained_policy"
      - "run_episodes_with_recording"
      - "ensure_output_dir"
    notes: "Collects metrics, handles optional random policy fallback."
  - path: "scripts/run_classic_interactions.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "benchmark_batch_runner"
      - "ensure_output_dir"
    notes: "Argparse wrapper around run_batch with manual resume + summary writing."
  - path: "scripts/run_social_navigation_benchmark.py"
    owner: "robot-sf-core"
    requires_recording: true
    helper_candidates:
      - "benchmark_batch_runner"
      - "ensure_output_dir"
      - "register_helper"
    notes: "Aggregates outputs and logs manual visualization guidance."
  - path: "scripts/benchmark_repro_check.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "benchmark_batch_runner"
    notes: "Iterates run_batch matrix for reproducibility checks."
  - path: "scripts/benchmark_workers.py"
    owner: "robot-sf-core"
    requires_recording: false
    helper_candidates:
      - "ensure_output_dir"
      - "benchmark_batch_runner"
    notes: "Creates per-worker outputs before invoking run_batch."
orchestrator_usage:
  - orchestrator_path: "examples/demo_offensive.py"
    helper_name: "prepare_classic_env"
    integration_notes: "Replace EnvSettings + RobotEnv with helper once implemented."
  - orchestrator_path: "examples/demo_offensive.py"
    helper_name: "load_trained_policy"
    integration_notes: "Use helper to surface FileNotFoundError guidance."
  - orchestrator_path: "examples/demo_offensive.py"
    helper_name: "run_episodes_with_recording"
    integration_notes: "Helper should manage loop/cleanup and optional rendering."
  - orchestrator_path: "examples/demo_defensive.py"
    helper_name: "prepare_classic_env"
    integration_notes: "Helper must allow observation adapters post-init."
  - orchestrator_path: "examples/demo_defensive.py"
    helper_name: "run_episodes_with_recording"
    integration_notes: "Need hook for observation adapter before predict()."
  - orchestrator_path: "examples/demo_pedestrian.py"
    helper_name: "prepare_pedestrian_env"
    integration_notes: "Helper should accept map defs and robot model injection."
  - orchestrator_path: "examples/classic_interactions_pygame.py"
    helper_name: "run_episodes_with_recording"
    integration_notes: "Helper must support SimulationView frames and MOVIEPY fallback."
  - orchestrator_path: "examples/demo_full_classic_benchmark.py"
    helper_name: "ensure_output_dir"
    integration_notes: "Helper to centralize timestamped directory creation."
  - orchestrator_path: "examples/demo_full_classic_benchmark.py"
    helper_name: "benchmark_batch_runner"
    integration_notes: "Helper should wrap BenchmarkCLIConfig + run_full_benchmark."
  - orchestrator_path: "scripts/benchmark.py"
    helper_name: "run_episodes_with_recording"
    integration_notes: "Helper should expose metrics summary hooks."
  - orchestrator_path: "scripts/benchmark02.py"
    helper_name: "ensure_output_dir"
    integration_notes: "Helper to standardize results directory selection."
  - orchestrator_path: "scripts/run_classic_interactions.py"
    helper_name: "benchmark_batch_runner"
    integration_notes: "Helper should handle resume manifest + JSON sidecar writing."
  - orchestrator_path: "scripts/run_social_navigation_benchmark.py"
    helper_name: "register_helper"
    integration_notes: "Docs helper can log new catalog entry when automation exists."
  - orchestrator_path: "scripts/benchmark_workers.py"
    helper_name: "ensure_output_dir"
    integration_notes: "Helper ensures per-worker output directories."
  - orchestrator_path: "examples/view_recording.py"
    helper_name: "capture_frames"
    integration_notes: "Helper should support recording_enabled envs and playback pipeline."
  - orchestrator_path: "examples/demo_robot_sf_bench_ppo.py"
    helper_name: "benchmark_batch_runner"
    integration_notes: "Helper should allow CLI invocation bridging (list-algorithms + run)."
notes:
  - "Inventory captures pre-refactor state; T025 will update occurrences after helpers land."
  - "FR-006 exclusion honored—validation scripts remain untouched and out of helper_candidates."
